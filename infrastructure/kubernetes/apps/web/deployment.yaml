apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment
  namespace: ${ENV}  # Will be replaced with detection-platform-prod or detection-platform-staging
  labels:
    app: detection-platform
    component: web
    tier: frontend
    environment: ${ENV}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
    prometheus.io/path: "/metrics"
spec:
  # High availability with 3 replicas
  replicas: 3
  # Zero-downtime rolling updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: detection-platform
      component: web
      tier: frontend
  template:
    metadata:
      labels:
        app: detection-platform
        component: web
        tier: frontend
    spec:
      # Container security configuration
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: web
        image: detection-platform/web:${VERSION}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        # Resource limits as per specifications
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1"
            memory: "2Gi"
        # Health monitoring probes
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 30
        env:
        - name: NODE_ENV
          value: "production"
        - name: TZ
          value: "UTC"
      # High availability: Pod anti-affinity for zone distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: detection-platform
                  component: web
              topologyKey: topology.kubernetes.io/zone
      # Ensure even pod distribution across zones
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: detection-platform
            component: web
      # Termination grace period for clean shutdown
      terminationGracePeriodSeconds: 60