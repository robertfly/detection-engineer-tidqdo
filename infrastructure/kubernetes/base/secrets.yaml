# Version: v1.27+
# Purpose: Core platform secrets management with encryption and rotation policies
# Security: AES-256-GCM encryption at rest, RBAC controls, audit logging enabled
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  namespace: detection-platform-prod  # Also deployed to detection-platform-staging
  labels:
    app: detection-platform
    component: backend
    secret-type: service-credentials
  annotations:
    # Rotation schedule annotations
    rotation.kubernetes.io/schedule: "@every 90d"
    # Encryption and security annotations
    encryption.kubernetes.io/mode: "aes-256-gcm"
    audit.kubernetes.io/enabled: "true"
    backup.kubernetes.io/enabled: "true"
type: Opaque
data:
  # Database credentials - 90 day rotation
  DATABASE_URL: ${BASE64_ENCODED_DB_URL}  # postgresql://<user>:<pass>@<host>:5432/detection_db
  
  # Redis connection - 90 day rotation
  REDIS_URL: ${BASE64_ENCODED_REDIS_URL}  # redis://<user>:<pass>@<host>:6379/0
  
  # JWT signing key - 30 day rotation
  JWT_SECRET_KEY: ${BASE64_ENCODED_JWT_KEY}  # 512-bit random key
  
  # Encryption key for data protection - 90 day rotation
  ENCRYPTION_KEY: ${BASE64_ENCODED_ENCRYPTION_KEY}  # AES-256 key
  
  # Integration tokens - 90 day rotation
  GITHUB_API_TOKEN: ${BASE64_ENCODED_GITHUB_TOKEN}
  SLACK_WEBHOOK_URL: ${BASE64_ENCODED_SLACK_URL}
  AUTH0_CLIENT_SECRET: ${BASE64_ENCODED_AUTH0_SECRET}
  GPT4_API_KEY: ${BASE64_ENCODED_GPT4_KEY}

---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: detection-platform-prod  # Also deployed to detection-platform-staging
  labels:
    app: detection-platform
    component: monitoring
    secret-type: monitoring-credentials
  annotations:
    # Rotation schedule annotations
    rotation.kubernetes.io/schedule: "@every 90d"
    # Encryption and security annotations
    encryption.kubernetes.io/mode: "aes-256-gcm"
    audit.kubernetes.io/enabled: "true"
    backup.kubernetes.io/enabled: "true"
type: Opaque
data:
  # Monitoring service credentials - 90 day rotation
  GRAFANA_ADMIN_PASSWORD: ${BASE64_ENCODED_GRAFANA_PASS}
  PROMETHEUS_ADMIN_PASSWORD: ${BASE64_ENCODED_PROMETHEUS_PASS}
  ELASTIC_PASSWORD: ${BASE64_ENCODED_ELASTIC_PASS}
  JAEGER_ADMIN_PASSWORD: ${BASE64_ENCODED_JAEGER_PASS}

---
# RBAC Role for secret access
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-reader
  namespace: detection-platform-prod  # Also created in detection-platform-staging
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
  resourceNames: ["backend-secrets", "monitoring-secrets"]

---
# RBAC RoleBinding for service accounts
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-reader-binding
  namespace: detection-platform-prod  # Also created in detection-platform-staging
subjects:
- kind: ServiceAccount
  name: backend-service
  namespace: detection-platform-prod
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io