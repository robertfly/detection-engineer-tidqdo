# AI Detection Platform Web Frontend CI/CD Pipeline
# Version: 1.0.0
name: Web Frontend CI/CD

# Trigger workflow on push/PR to main/develop branches for web changes
on:
  push:
    branches: [main, develop]
    paths:
      - 'src/web/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/web/**'
  workflow_dispatch:

# Concurrency control to prevent parallel runs on same ref
concurrency:
  group: web-${{ github.ref }}
  cancel-in-progress: true

# Define required permissions
permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write
  security-events: write

# Environment variables
env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: ai-detection-platform-web
  CACHE_KEY_PREFIX: web-build

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        working-directory: src/web
        run: npm ci --no-audit --no-fund

      - name: Run ESLint
        working-directory: src/web
        run: npm run lint
        
      - name: Run TypeScript check
        working-directory: src/web
        run: npm run typecheck

      - name: Run tests with coverage
        working-directory: src/web
        run: npm run test:coverage
        
      - name: SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: src/web

      - name: Snyk Security Scan
        uses: snyk/actions/node@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: src/web/coverage
          retention-days: 14

      - name: Report metrics to DataDog
        uses: DataDog/datadog-actions-metrics@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          metrics: |
            ci.web.test.duration:${{ steps.test.outputs.duration }}|gauge
            ci.web.test.coverage:${{ steps.test.outputs.coverage }}|gauge

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: src/web
          file: src/web/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_VERSION=${{ github.sha }}

      - name: Sign container image
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_KEY }}
        run: |
          cosign sign --key env://COSIGN_KEY ${DOCKER_REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA}
          cosign verify --key env://COSIGN_KEY ${DOCKER_REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA}

      - name: Report metrics to DataDog
        uses: DataDog/datadog-actions-metrics@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          metrics: |
            ci.web.build.duration:${{ steps.build.outputs.duration }}|gauge
            ci.web.build.size:${{ steps.build.outputs.size }}|gauge

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://detection-platform.com
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Start canary deployment
        run: |
          aws eks update-kubeconfig --name detection-platform-cluster
          kubectl set image deployment/web-frontend \
            web-frontend=${DOCKER_REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA} \
            --record

      - name: Verify deployment health
        run: |
          kubectl rollout status deployment/web-frontend -n production
          curl -f https://detection-platform.com/health || exit 1

      - name: Monitor deployment metrics
        uses: DataDog/datadog-actions-metrics@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          metrics: |
            deployment.web.status:1|gauge
            deployment.web.duration:${{ steps.deploy.outputs.duration }}|gauge

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl rollout undo deployment/web-frontend -n production
          curl --request POST \
            --url ${{ secrets.SLACK_WEBHOOK_URL }} \
            --header 'content-type: application/json' \
            --data '{"text": "‚ùå Web frontend deployment failed and was rolled back"}'