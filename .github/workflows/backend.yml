name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
  workflow_dispatch:

# Ensure only one workflow runs per ref/PR
concurrency:
  group: backend-${{ github.ref }}
  cancel-in-progress: true

# Define required permissions
permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write
  security-events: write

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  MIN_COVERAGE: 90
  MAX_RETRIES: 3
  DEPLOYMENT_TIMEOUT: 300

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'src/backend/poetry.lock'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.in-project true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: src/backend/.venv
          key: poetry-${{ runner.os }}-${{ hashFiles('src/backend/poetry.lock') }}

      - name: Install dependencies
        working-directory: src/backend
        run: poetry install --no-interaction

      - name: Run tests with coverage
        working-directory: src/backend
        run: |
          poetry run pytest \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=test-results.xml \
            --cov-fail-under=${{ env.MIN_COVERAGE }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: src/backend/coverage.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: src/backend/test-results.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: python:3.11-slim
          args: --severity-threshold=high

      - name: Run dependency vulnerability scan
        working-directory: src/backend
        run: |
          poetry run safety check

      - name: Run SAST analysis
        working-directory: src/backend
        run: |
          poetry run bandit -r app/ -f json -o bandit-results.json
          
      - name: Upload security results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: src/backend/bandit-results.json

  build:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: security
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: src/backend
          file: src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            POETRY_VERSION=${{ env.POETRY_VERSION }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Update EKS deployment
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}
          kubectl set image deployment/backend \
            backend=${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }}
          kubectl rollout status deployment/backend --timeout=${{ env.DEPLOYMENT_TIMEOUT }}s

      - name: Verify deployment health
        run: |
          kubectl get deployment backend -o json | \
            jq -e '.status.conditions[] | select(.type=="Available" and .status=="True")'

      - name: Report deployment to Datadog
        uses: datadog/action-datadog-reporting@v1
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          deployment-name: backend
          git-sha: ${{ github.sha }}
          git-repository-url: ${{ github.repository }}

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Check workflow status
        uses: technote-space/workflow-conclusion-action@v3

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            Backend deployment status: ${{ env.WORKFLOW_CONCLUSION }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}